#include "AFCS_PITCH_PROTECTION.h"

AFCS_PITCH_PROTECTION::AFCS_PITCH_PROTECTION(IAFCS_CONTROLLER* AFCS_CTL) : IAFCS_MODULE_THREADED(AFCS_CTL)
{
	SURFACE_CONTROLLER = new PID_CONTROLLER(PITCH_ELEVATOR_RECOVERY_FACTOR, 0, 0);
}

void AFCS_PITCH_PROTECTION::RunModuleLogic()
{
	double FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES = AFCS_CTL->FLIGHT_PARAMETERS.PLANE_PITCH_DEGREES;
	double PITCH_DESIRED_RATE = AFCS_CTL->JOYSTICK_INPUT.Y_AXIS * PITCH_MAXIMUM_REQUESTABLE_RATE;
	bool GOES_TOWARD_LIMIT = (Sign(FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES) != Sign(PITCH_DESIRED_RATE));

	/// If the pitch angle is greater than the maximum pitch angle, use maximum elevator available to reduce it
	if (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES <= PITCH_MAXIMUM_POSITIVE_ANGLE || FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES >= PITCH_MAXIMUM_NEGATIVE_ANGLE)
	{
		PITCH_DESIRED_RATE = PITCH_RECOVERY_RATE * Sign(FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES);
	}
	else
		/// If the pitch angle is greater than the protection engagement threshold, linearly reduce the pitch autority to reach 0 at the maximum pitch angle
		if (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES < PITCH_REDUCED_AUTHORITY_POSITIVE_THRESHOLD || FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES > PITCH_REDUCED_AUTHORITY_NEGATIVE_THRESHOLD && GOES_TOWARD_LIMIT == true)
		{
			double PITCH_MAXIMUM_RATE = 0;
			if (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES < PITCH_REDUCED_AUTHORITY_POSITIVE_THRESHOLD)
			{
				PITCH_MAXIMUM_RATE = PITCH_MAXIMUM_REQUESTABLE_RATE + (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES - PITCH_REDUCED_AUTHORITY_POSITIVE_THRESHOLD) * (0 - PITCH_MAXIMUM_REQUESTABLE_RATE) / (PITCH_MAXIMUM_POSITIVE_ANGLE - PITCH_REDUCED_AUTHORITY_POSITIVE_THRESHOLD);
			}
			if (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES > PITCH_REDUCED_AUTHORITY_NEGATIVE_THRESHOLD)
			{
				PITCH_MAXIMUM_RATE = PITCH_MAXIMUM_REQUESTABLE_RATE + (FLIGHT_PARAMETERS_PLANE_PITCH_DEGREES - PITCH_REDUCED_AUTHORITY_NEGATIVE_THRESHOLD) * (0 - PITCH_MAXIMUM_REQUESTABLE_RATE) / (PITCH_MAXIMUM_NEGATIVE_ANGLE - PITCH_REDUCED_AUTHORITY_NEGATIVE_THRESHOLD);
			}
			if (abs(PITCH_DESIRED_RATE) > PITCH_MAXIMUM_RATE)
			{
				PITCH_DESIRED_RATE = PITCH_MAXIMUM_RATE * Sign(PITCH_DESIRED_RATE);
			}
		}

	auto PITCH_CONTROLLER_OUTPUT = SURFACE_CONTROLLER->Update(PITCH_DESIRED_RATE - AFCS_CTL->FLIGHT_PARAMETERS.ROTATION_VELOCITY_BODY_Y);

	if (PITCH_CONTROLLER_OUTPUT > 1) PITCH_CONTROLLER_OUTPUT = 1;
	if (PITCH_CONTROLLER_OUTPUT < -1) PITCH_CONTROLLER_OUTPUT = -1;

	/// Send updated elevator position to the simulator
	AFCS_CTL->ELEVATOR_POSITION.ELEVATOR_POSITION = PITCH_CONTROLLER_OUTPUT;
	SimConnect_SetDataOnSimObject(AFCS_CTL->hSimConnect, AFCS_CTL->DEFINITION_ELEVATOR_POSITION, SIMCONNECT_OBJECT_ID_USER, 0, 1, sizeof(AFCS_CTL->ELEVATOR_POSITION), &AFCS_CTL->ELEVATOR_POSITION);
}
